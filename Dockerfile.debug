# EMERGENCY DEBUG VERSION - NO CACHING
FROM node:20-slim AS frontend-build

# Build frontend
WORKDIR /app/frontend

# Copy package files first
COPY frontend/package.json frontend/package-lock.json ./

# Install dependencies
RUN npm ci --legacy-peer-deps

# Copy the entire frontend directory structure at once
COPY frontend/ ./

# FORCE EXECUTION - Break cache with timestamp
RUN echo "TIMESTAMP: $(date)" && echo "Starting comprehensive debug..."

# Check current working directory
RUN echo "=== CURRENT DIRECTORY ===" && pwd

# List everything in current directory
RUN echo "=== ROOT DIRECTORY CONTENTS ===" && ls -la

# Check if src directory exists
RUN echo "=== SRC DIRECTORY CHECK ===" && ls -la src/

# Check lib directory specifically
RUN echo "=== LIB DIRECTORY CHECK ===" && ls -la src/lib/

# Verify critical files exist
RUN echo "=== FILE EXISTENCE CHECK ===" && \
    test -f src/lib/utils.js && echo "✓ utils.js EXISTS" || echo "✗ utils.js MISSING" && \
    test -f src/lib/constants.js && echo "✓ constants.js EXISTS" || echo "✗ constants.js MISSING"

# Show file contents
RUN echo "=== UTILS.JS CONTENT ===" && cat src/lib/utils.js

RUN echo "=== CONSTANTS.JS CONTENT (first 10 lines) ===" && head -10 src/lib/constants.js

# Show vite config
RUN echo "=== VITE CONFIG ===" && cat vite.config.js

# Show jsconfig
RUN echo "=== JSCONFIG ===" && cat jsconfig.json

# Find all @/lib imports
RUN echo "=== FINDING @/lib IMPORTS ===" && find . -name "*.jsx" | xargs grep -l "@/lib" | head -10

# Show specific problematic file
RUN echo "=== PROBLEMATIC BADGE.JSX ===" && head -10 src/components/ui/badge.jsx

RUN echo "=== DEBUG COMPLETE - ATTEMPTING BUILD ==="

# Build the project
RUN npm run build

# Backend stage
FROM python:3.11-slim

# Install system dependencies
RUN apt-get update && apt-get install -y \
    gcc \
    g++ \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /app

# Copy backend files
COPY backend/ ./backend/
COPY main.py ./

# Copy built frontend to backend static folder
COPY --from=frontend-build /app/frontend/dist ./backend/static/

# Install Python dependencies
RUN pip install --no-cache-dir -r backend/requirements.txt

# Expose port
EXPOSE $PORT

# Start command
CMD ["python", "main.py"]
